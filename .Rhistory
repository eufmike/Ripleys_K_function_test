remDr$findElement(using = "id", "base_params[end_date]")$clearElement()
remDr$findElement(using = "id", "base_params[end_date]")$sendKeysToElement(list("June 30, 2017"))
Sys.sleep(1)
remDr$findElement(using = "id", "base_params_which_date_column")$switchToFrame
remDr$findElement(using = 'xpath', "//*/option[@value = 'submission_date']")$clickElement()
Sys.sleep(1)
## pull data
remDr$findElement(using = "id", "run_report_button")$clickElement()
Sys.sleep(1)
## export to csv
remDr$findElement(using = "link text", "Export...")$clickElement()
remDr$findElement(using = "xpath", "//*[(@id = \"getCSV\")]")$clickElement()
remDr$findElement(using = "xpath", "//*[(@id = \"requests_button\")]")$clickElement()
remDr$findElement(using = "xpath", "//*[(@id = \"download_filtered_requests\")]")$clickElement()
remDr$close()
rD$server$stop()
source('~/Google Drive/WUCCI/code/training_alert/training_alert_2.R', echo=TRUE)
remDr$close()
rD$server$stop()
source('~/Google Drive/WUCCI/code/training_alert/training_alert_2.R', echo=TRUE)
remDr$findElement(using = "id", "base_params[start_date]")$clearElement()
remDr$close()
rD$server$stop()
source('~/Google Drive/WUCCI/code/training_alert/training_alert_2.R', echo=TRUE)
remDr$close()
rD$server$stop()
source('~/Google Drive/WUCCI/code/training_alert/training_alert_2.R', echo=TRUE)
source('~/Google Drive/WUCCI/code/training_alert/training_alert_2.R', echo=TRUE)
library(RSelenium)
library(wdman)
# start the server --------------------------------------------------------
cprof <- getChromeProfile("/Users/michaelshih/Google\ Drive/WUCCI/code/training_alert/chrome", "Default")
##rD <- rsDriver(verbose = TRUE, browser = "chrome")
rD <- rsDriver(verbose = FALSE, browser = "chrome", extraCapabilities = cprof)
Sys.sleep(1)
remDr <- rD$client
# simulate browser --------------------------------------------------------
remDr$navigate("https://wustl.ilabsolutions.com/account/login")
Sys.sleep(5)
remDr$findElement(using = "xpath", "//a")$clickElement()
Sys.sleep(5)
# log in with my wustl key ------------------------------------------------
username <- remDr$findElement(using = "id", value = "ucWUSTLKeyLogin_txtUsername")
username$sendKeysToElement(list("c.shih"))
password <- remDr$findElement(using = "id", value = "ucWUSTLKeyLogin_txtPassword")
password$sendKeysToElement(list("qazxsw1982_Mike"))
remDr$findElement(using = "xpath", "//*[(@id = \"ucWUSTLKeyLogin_btnLogin\")]")$clickElement() ## click the button
Sys.sleep(5)
# Pull out data from the report session ---------------------------------------
remDr$findElement(using = "xpath", "//*[(@id = \"reports_button\")]")$clickElement()
Sys.sleep(1)
remDr$findElement(using = "id", "service_request_btn")$clickElement()
Sys.sleep(0.5)
remDr$findElement(using = "id", "default_report_button")$clickElement()
Sys.sleep(5)
## input date
remDr$findElement(using = "id", "base_params[start_date]")$clearElement()
remDr$findElement(using = "id", "base_params[start_date]")$sendKeysToElement(list("May 1, 2017"))
remDr$findElement(using = "id", "base_params[end_date]")$clearElement()
remDr$findElement(using = "id", "base_params[end_date]")$sendKeysToElement(list("June 30, 2017"))
Sys.sleep(1)
remDr$findElement(using = "id", "base_params_which_date_column")$switchToFrame
remDr$findElement(using = 'xpath', "//*/option[@value = 'submission_date']")$clickElement()
Sys.sleep(1)
## pull data
remDr$findElement(using = "id", "run_report_button")$clickElement()
Sys.sleep(3)
## export to csv
remDr$findElement(using = "link text", "Export...")$clickElement()
remDr$findElement(using = "xpath", "//*[(@id = \"getCSV\")]")$clickElement()
# export request from the “View All Request” session ----------------------
remDr$findElement(using = "xpath", "//*[(@id = \"requests_button\")]")$clickElement()
Sys.sleep(3)
remDr$findElement(using = "xpath", "//*[(@id = \"category_id_7759\")]")$clickElement()
Sys.sleep(3)
remDr$findElement(using = "xpath", "//*[(@id = \"download_filtered_requests\")]")$clickElement()
Sys.sleep(7)
remDr$findElement(using = "xpath", "//*[(@id = \"apply_filters\")]")$clickElement()
source('/Volumes/wuccistaff/Vagina Project 2/calculation.R', echo=TRUE)
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
install.packages(c("BH", "bindrcpp", "boot", "crayon", "curl", "dplyr", "foreign", "glue", "httr", "lme4", "magick", "Matrix", "mgcv", "openssl", "R6", "Rcpp", "rlang", "scales", "subprocess", "tibble", "tidyr", "XML"))
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
summary(data)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
files
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
summary(data_compile)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
x <- data_compile$factors
factor(x)
levels(factor(x))
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
factors
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
factors
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
factors
data_area <- filter(data_compile, factors == i);
p1 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram() +
scale_y_log10() +
xlim(0, 5000)
p1
data_area <- filter(data_compile, factors == i);
p1 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram() +
scale_y_log10() +
xlim(0, 5000)
p1
data_area <- filter(data_compile, factors == i);
p1 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20) +
scale_y_log10() +
xlim(0, 5000)
p1
data_area
data_area <- filter(data_compile, factors == i);
p2 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20) +
scale_y_log10() +
xlim(0, 5000)
p2
data_area <- filter(data_compile, factors == i);
p2 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20) +
scale_y_log10()
p2
data_area <- filter(data_compile, factors == i);
p2 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20)
p2
data_area <- filter(data_compile, factors == i);
p2 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20)
p2
for (i in factors){
data_area <- filter(data_compile, factors == i);
p1 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram() +
scale_y_log10() #+
#xlim(0, 5000)
print(p1)
}
p1 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20) +
scale_y_log10() #+
p1 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20) +
scale_y_log10() #+
p2 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20)
library(ggplot2)
library(tidyr)
library(dplyr)
data_path <- "/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/data";
files <- list.files(data_path);
group <- c("c1_DKO", "NTP_LKO", "WT");
data_compile <- data.frame();
for (i in 1:length(files)) {
data_file <- file.path(data_path, files[i]);
data <- read.csv(data_file, header = T);
data <- gather(data, "factors", "value", 2:6);
data$group <- group[i];
x <- head(data);
# data_t <- gather(data, "")
print(x);
data_compile <- rbind(data_compile, data);
}
head(data_compile);
factors <- levels(factor(data_compile$factors));
for (i in factors){
data_area <- filter(data_compile, factors == i);
p1 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20) +
scale_y_log10() #+
#xlim(0, 5000)
print(p1)
}
data_area <- filter(data_compile, factors == i);
p2 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram(binwidth = 20)
p2
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
p1 <- ggplot(data_area, aes(value, fill = group)) +
geom_histogram() +
scale_y_log10() #+
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
factors
source('/Volumes/wuccistaff/Mike/Libby Lipid Project 02/real/code/data_histogram.R', echo=TRUE)
setwd("~/Documents/code/personal_project/Ripleys_K_function_test")
install.packages("spatstat")
install.packages(c("BH", "bindr", "bindrcpp", "broom", "callr", "car", "cluster", "curl", "date", "DBI", "dbplyr", "digest", "dplyr", "evaluate", "forcats", "foreign", "ggplot2", "glue", "haven", "highr", "hms", "htmlwidgets", "httpuv", "knitr", "lazyeval", "lme4", "lubridate", "magick", "mapproj", "maps", "MASS", "Matrix", "mgcv", "modelr", "munsell", "nlme", "openssl", "pillar", "plogr", "psych", "purrr", "quantreg", "R.oo", "R.utils", "Rcpp", "RcppEigen", "readxl", "reprex", "reshape2", "rgl", "rJava", "rlang", "rmarkdown", "rpart", "selectr", "shiny", "sourcetools", "stringi", "stringr", "subprocess", "survival", "tidyr", "tidyselect", "utf8", "viridisLite", "withr", "xlsx", "XML", "xml2", "yaml"))
source('~/Documents/code/personal_project/Ripleys_K_function_test/distribution_test_r_01.R', echo=TRUE)
source('~/Documents/code/personal_project/Ripleys_K_function_test/distribution_test_r_01.R', echo=TRUE)
head(data)
hear(data)
head(data)
source('~/Documents/code/personal_project/Ripleys_K_function_test/distribution_test_r_01.R', echo=TRUE)
path <- '/Users/michaelshih/Documents/code/personal_project/Ripleys_K_function_test/'
outputfolder <- 'output'
outputsubfolder_csv <- 'csv'
inputpath <- file.path(path, outputfolder)
print(inputpath)
library(spatstat)
path <- '/Users/michaelshih/Documents/code/personal_project/Ripleys_K_function_test'
outputfolder <- 'output'
outputsubfolder_csv <- 'csv'
inputpath <- file.path(path, outputfolder)
print(inputpath)
data <- read.csv2(inputpath)
head(data)
path <- '/Users/michaelshih/Documents/code/personal_project/Ripleys_K_function_test'
outputfolder <- 'output'
outputsubfolder_csv <- 'csv'
filename <- 'P_ThomasPP'
inputpath <- file.path(path, outputfolder, outputsubfolder_csv, paste(filename, '.csv'))
print(inputpath)
path <- '/Users/michaelshih/Documents/code/personal_project/Ripleys_K_function_test'
outputfolder <- 'output'
outputsubfolder_csv <- 'csv'
filename <- 'P_ThomasPP'
inputpath <- file.path(path, outputfolder, outputsubfolder_csv, paste(filename, '.csv', sep = ''))
print(inputpath)
data <- read.csv(inputpath)
head(data)
library(spatstat)
mypattern <- ppp(data['x'], data['y'])
plot(mypattern)
mypattern <- ppp(data['x'], data['y'])
source('~/Documents/code/personal_project/Ripleys_K_function_test/distribution_test_r_01.R', echo=TRUE)
mypattern <- ppp(data$x, data$y)
plot(mypattern)
plot(mypattern, xlim = c(0, 20), ylim = c(0, 20))
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
png("test.png",width=20,height=20,units="in",res=1200)
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
png("test.png",width=20,height=20,units="in",res=1200)
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
cwd()
pwd()
getwd()
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
png("test.png",width = 10, height= 10, units= "in", res= 1200)
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
png("test.png",width = 10, height= 10, units= "in", res= 300)
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
png("test.png",width = 10, height= 10, units= "in", res= 300)
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
png("test.png", width = 10, height= 10, units= "in", res= 300)
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
dev.off()
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
png("test.png", width = 10, height= 10, units= "in", res= 300)
plot(data$x, data$y, xlim = c(0, 20), ylim = c(0, 20))
dev.off()
summary(mypattern)
mypattern <- ppp(data$x, data$y)
summary(mypattern)
mypattern <- ppp(data$x, data$y, c(0, 20), c(0, 20))
summary(mypattern)
mypattern <- ppp(data$x, data$y, c(0, 20), c(0, 20))
summary(mypattern)
plot(mypattern, xlim = c(0, 20), ylim = c(0, 20))
dev.off()
dev.off()
plot(mypattern, xlim = c(0, 20), ylim = c(0, 20))
dev.off()
mypattern <- ppp(data$x, data$y, c(0, 20), c(0, 20))
summary(mypattern)
dev.off()
dev.off()
png("test.png", width = 10, height= 10, units= "in", res= 300)
plot(mypattern, xlim = c(0, 20), ylim = c(0, 20))
dev.off()
dev.off()
library(spatstat)
path <- '/Users/michaelshih/Documents/code/personal_project/Ripleys_K_function_test'
outputfolder <- 'output'
outputsubfolder_csv <- 'csv'
filename <- 'P_ThomasPP'
inputpath <- file.path(path, outputfolder, outputsubfolder_csv, paste(filename, '.csv', sep = ''))
print(inputpath)
data <- read.csv(inputpath)
head(data)
summary(data)
mypattern <- ppp(data$x, data$y, c(0, 20), c(0, 20))
summary(mypattern)
png("test.png", width = 10, height= 10, units= "in", res= 300)
plot(mypattern, xlim = c(0, 20), ylim = c(0, 20))
dev.off()
dev.off()
plot(Kest(mypattern))
result = Kest(mypattern)
result(head)
result = Kest(mypattern)
head(result)
result = Kest(mypattern$x)
head(result)
result = Kest(mypattern)
head(result)
result = Kest(mypattern, correction = boder)
head(result)
plot(result)
result = Kest(mypattern, correction = boder)
head(result)
plot(result)
result = Kest(mypattern, correction = 'border')
head(result)
plot(result)
summary(mypattern)
plot(density(mypattern))
result_1 = Kest(mypattern)
head(result_1)
plot(result_1)
result_1 = Lest(mypattern)
head(result_1)
plot(result_1)
head(result_1$r)
head(result_1$r)
result_1 = Lest(mypattern)
head(result_1$r)
plot(result_1)
r <- result_1$r
K <- result_1$iso
plot(r, K)
L_rr <- L - r
plot(r, L_rr)
r <- result_1$r
L <- result_1$iso
L_rr <- L - r
plot(r, L_rr)
result_2 = Kest(mypattern, correction = 'border')
head(result_2)
r <- result_2$r
L <- result_2$iso
L_rr <- L - r
plot(r, L_rr)
result_2 = Lest(mypattern, correction = 'border')
head(result_2)
r <- result_2$r
L <- result_2$iso
L_rr <- L - r
plot(r, L_rr)
result_2 = Lest(mypattern, correction = 'border')
head(result_2)
r <- result_2$r
L <- result_2$iso
L_rr <- L - r
plot(r, L_rr)
result_2 = Lest(mypattern, correction = 'border')
head(result_2)
r <- result_2$r
L <- result_2$border
L_rr <- L - r
plot(r, L_rr)
result_1 = Lest(mypattern)
head(result_1$r)
plot(result_1)
r <- result_1$r
L <- result_1$iso
L_rr <- L - r
plot(r, L_rr)
result_1 = Lest(mypattern)
head(result_1$r)
plot(result_1)
r <- result_1$r
L <- result_1$iso
L_rr <- L - r
plot(r, L_rr)
result_2 = Lest(mypattern, correction = 'border')
head(result_2)
r <- result_2$r
L <- result_2$border
L_rr <- L - r
plot(r, L_rr)
result_1 = Lest(mypattern)
head(result_1$r)
plot(result_1)
r <- result_1$r
L <- result_1$iso
L_rr <- L - r
plot(r, L_rr)
result_1 = Lest(mypattern)
head(result_1$r)
plot(result_1)
r <- result_1$r
L <- result_1$iso
L_rr <- L - r
plot(r, L)
library(spatstat)
path <- '/Users/michaelshih/Documents/code/personal_project/Ripleys_K_function_test'
outputfolder <- 'output'
outputsubfolder_csv <- 'csv'
filename <- 'P_PoissonPP'
inputpath <- file.path(path, outputfolder, outputsubfolder_csv, paste(filename, '.csv', sep = ''))
print(inputpath)
data <- read.csv(inputpath)
head(data)
summary(data)
mypattern <- ppp(data$x, data$y, c(0, 20), c(0, 20))
summary(mypattern)
png("test.png", width = 10, height= 10, units= "in", res= 300)
plot(mypattern, xlim = c(0, 20), ylim = c(0, 20))
dev.off()
result_1 = Lest(mypattern)
head(result_1$r)
plot(result_1)
r <- result_1$r
L <- result_1$iso
L_rr <- L - r
plot(r, L)
library(spatstat)
path <- '/Users/michaelshih/Documents/code/personal_project/Ripleys_K_function_test'
outputfolder <- 'output'
outputsubfolder_csv <- 'csv'
filename <- 'P_PoissonPP'
inputpath <- file.path(path, outputfolder, outputsubfolder_csv, paste(filename, '.csv', sep = ''))
print(inputpath)
data <- read.csv(inputpath)
head(data)
summary(data)
mypattern <- ppp(data$x, data$y, c(0, 20), c(0, 20))
summary(mypattern)
png("test.png", width = 10, height= 10, units= "in", res= 300)
plot(mypattern, xlim = c(0, 20), ylim = c(0, 20))
dev.off()
result_1 = Lest(mypattern)
head(result_1$r)
plot(result_1)
r <- result_1$r
L <- result_1$iso
L_rr <- L_rr - r
plot(r, L)
library(spatstat)
path <- '/Users/michaelshih/Documents/code/personal_project/Ripleys_K_function_test'
outputfolder <- 'output'
outputsubfolder_csv <- 'csv'
filename <- 'P_PoissonPP'
inputpath <- file.path(path, outputfolder, outputsubfolder_csv, paste(filename, '.csv', sep = ''))
print(inputpath)
data <- read.csv(inputpath)
head(data)
summary(data)
mypattern <- ppp(data$x, data$y, c(0, 20), c(0, 20))
summary(mypattern)
png("test.png", width = 10, height= 10, units= "in", res= 300)
plot(mypattern, xlim = c(0, 20), ylim = c(0, 20))
dev.off()
result_1 = Lest(mypattern)
head(result_1$r)
plot(result_1)
r <- result_1$r
L <- result_1$iso
L_rr <- L - r
plot(r, L_rr)
plot(r, L)
plot(Kest(mypattern))
plot(r, K)
result_1 = Kest(mypattern)
head(result_1$r)
r <- result_1$r
K <- result_1$iso
plot(r, K)
plot(r, sqrt(K/pi))
plot(r, sqrt(K/pi) - r)
plot(r, sqrt(K/pi))
plot(r, K)
